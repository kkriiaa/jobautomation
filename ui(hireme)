#ui
import streamlit as st
import requests
from helpers import parse_cv, extract_keywords, fetch_jobs, rank_jobs_with_gpt

# -------------------- UI STYLING -------------------
def set_background_image():
    st.markdown("""
        <style>
        .stApp {
            background-color: #2c3e50;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }
        h1 {
            text-align: center;
            color: white;
            font-size: 4em;
            margin-top: 0.5em;
            text-shadow: 2px 2px #000000;
        }
        p.tagline {
            text-align: center;
            color: #f0f0f0;
            font-size: 1.5em;
            margin-bottom: 2em;
        }
        .stButton>button {
            background-color: #f39c12;
            color: white;
            font-weight: bold;
            border-radius: 5px;
        }
        </style>
    """, unsafe_allow_html=True)

# -------------------- MAIN FUNCTION -------------------
def main():
    set_background_image()

    st.markdown("<h1>HireMeBro</h1>", unsafe_allow_html=True)
    st.markdown("<p class='tagline'>Your AI Assistant for Job Hunting</p>", unsafe_allow_html=True)

    api_key = st.sidebar.text_input("üîë OpenRouter API Key", type="password")
    uploaded_file = st.file_uploader("üìÑ Upload Your CV (PDF or DOCX)", type=["pdf", "docx"])

    if uploaded_file is not None:
        cv_text = parse_cv(uploaded_file)
        st.success("‚úÖ CV uploaded and parsed successfully!")

        location_filter = st.text_input("üìç Preferred Location (e.g., Berlin, Remote)")
        remote_only = st.checkbox("üåê Remote Only", value=False)

        # Extract keywords but do not display
        keywords = extract_keywords(cv_text)

        # Fetch jobs based on keywords (replace with actual API logic if needed)
        jobs = fetch_jobs(keywords, location_filter, remote_only)
        
        # Debugging: Check if jobs are being fetched correctly
        if jobs:
            st.markdown("### ü§ñ Ranking Jobs using GPT...")
            ranked_jobs = rank_jobs_with_gpt(cv_text, jobs, api_key)

            # Check if ranked jobs are being returned
            if ranked_jobs:
                for job in ranked_jobs:
                    # Ensure each job is a dictionary before calling .get()
                    if isinstance(job, dict):
                        title = job.get('title', 'No title')
                        company_name = job.get('company_name', 'No company name')
                        location = job.get('location', 'No location')
                        url = job.get('url', '#')

                        # Display job details (without description)
                        st.markdown(f"""
                        ---
                        #### üß≥ {title}
                        **Company**: {company_name}  
                        **Location**: {location}  
                        [üîó Apply Here]({url})
                        """, unsafe_allow_html=True)
            else:
                st.warning("No jobs found or error during ranking.")
        else:
            st.warning("No jobs found based on the search criteria.")
    else:
        st.info("Please upload your CV to get started.")

if __name__ == "__main__":
    main()


